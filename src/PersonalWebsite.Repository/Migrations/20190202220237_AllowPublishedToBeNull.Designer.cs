// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalWebsite.Repository;

namespace PersonalWebsite.Repository.Migrations
{
    [DbContext(typeof(PersonalWebsiteDbContext))]
    [Migration("20190202220237_AllowPublishedToBeNull")]
    partial class AllowPublishedToBeNull
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PersonalWebsite.Repository.Models.About", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("About");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("GitHubUrl");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LinkedInUrl");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("FinishedReadingAt");

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<int?>("Rating");

                    b.Property<string>("Recommendation");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.CommunityInvolvement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("CommunityInvolvement");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.CommunityInvolvementSkills", b =>
                {
                    b.Property<Guid>("CommunityInvolvementId");

                    b.Property<Guid>("SkillId");

                    b.HasKey("CommunityInvolvementId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CommunityInvolvementSkills");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Employment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyLogoUrl");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CompanyUrl");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("JobDescription");

                    b.Property<string>("JobTitle");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Employment");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.EmploymentSkills", b =>
                {
                    b.Property<Guid>("EmploymentId");

                    b.Property<Guid>("SkillId");

                    b.HasKey("EmploymentId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("EmploymentSkills");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("CompletedAt");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<Guid>("GoalCategoryForeignKey");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("GoalCategoryForeignKey");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.GoalCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("GoalCategories");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Interest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ImageLink");

                    b.Property<DateTime?>("LastSavedAt");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<Guid>("PostCategoryForeignKey");

                    b.Property<bool>("Published");

                    b.Property<DateTime?>("PublishedAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("PostCategoryForeignKey");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.PostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.PostTag", b =>
                {
                    b.Property<Guid>("PostId");

                    b.Property<Guid>("TagId");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime>("FinishDate");

                    b.Property<string>("GitHubUrl");

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("ProjectUrl");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.ProjectSkills", b =>
                {
                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("SkillId");

                    b.HasKey("ProjectId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ProjectSkills");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.CommunityInvolvementSkills", b =>
                {
                    b.HasOne("PersonalWebsite.Repository.Models.Skill", "Skill")
                        .WithMany("CommunityInvolvements")
                        .HasForeignKey("CommunityInvolvementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersonalWebsite.Repository.Models.CommunityInvolvement", "CommunityInvolvement")
                        .WithMany("Skills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.EmploymentSkills", b =>
                {
                    b.HasOne("PersonalWebsite.Repository.Models.Skill", "Skill")
                        .WithMany("Employments")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersonalWebsite.Repository.Models.Employment", "Employment")
                        .WithMany("Skills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Goal", b =>
                {
                    b.HasOne("PersonalWebsite.Repository.Models.GoalCategory", "Category")
                        .WithMany("Goals")
                        .HasForeignKey("GoalCategoryForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.Post", b =>
                {
                    b.HasOne("PersonalWebsite.Repository.Models.PostCategory", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("PostCategoryForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.PostTag", b =>
                {
                    b.HasOne("PersonalWebsite.Repository.Models.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersonalWebsite.Repository.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PersonalWebsite.Repository.Models.ProjectSkills", b =>
                {
                    b.HasOne("PersonalWebsite.Repository.Models.Skill", "Skill")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersonalWebsite.Repository.Models.Project", "Project")
                        .WithMany("SkillsUsed")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
